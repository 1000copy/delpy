unit TestuLang;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, uParser, forms, dialogs, classes, contnrs, sysutils, uLang, ulangException,uFile;

type
        // Test methods for class TLispNode
        
        TestTLispNode = class(TTestCase)
        strict private
                FLispNode: TLispNode;
        public
                procedure SetUp; override;
                procedure TearDown; override;
        published
                procedure TestiDup;
                procedure TestregisterToReturnList;
                procedure TestiPrint;
                procedure TestisNumb;
                procedure TestisStr;
                procedure TestisInt;
                procedure TestisList;
                procedure TestcheckNumb;
                procedure TestcheckToken;
                procedure TestcheckStr;
                procedure TestcheckInt;
                procedure TestcheckList;
                procedure TestcheckBool;
                procedure TestgetList;
                procedure TestgetInt;
                procedure TestgetNumb;
                procedure TestgetStr;
                procedure TestgetBool;
                procedure TestiEvaluate;
        end;
        // Test methods for class TLispList
        
        TestTLispList = class(TTestCase)
        strict private
                FLispList: TLispList;
                FLispLang : TLispLang;
        public
                procedure SetUp; override;
                procedure TearDown; override;
        published
                procedure Testsize;
                procedure Testappend;
                procedure Testnth;
                procedure TestcheckSizeEquals;
                procedure TestcheckSizeGE;
        end;
        // Test methods for class THashTable
        
        TestTHashTable = class(TTestCase)
        strict private
                FHashTable: THashTable;
        public
        published
                procedure TestsetValue;
                procedure TestgetValue;
        end;
        // Test methods for class ILispPackage
        
        TestILispPackage = class(TTestCase)
        strict private
                FILispPackage: ILispPackage;
        public
                procedure SetUp; override;
                procedure TearDown; override;
        published
                procedure TestCallFunction;
                procedure TestSupportFunction;
                procedure TestGetName;
                procedure TestGetTestSrc;
        end;
        // Test methods for class TLispPackageBase
        
        TestTLispPackageBase = class(TTestCase)
        strict private
                FLispPackageBase: TLispPackageBase;
        public
        published
                procedure TestCallFunction;
                procedure TestGetName;
                procedure TestGetTestSrc;
                procedure TestSupportFunction;
        end;
        // Test methods for class TLispLang

        TestTLispLang = class(TTestCase)
        strict private
                FLispLang: TLispLang;
  private
        public
                procedure SetUp; override;
                procedure TearDown; override;
        published
                procedure TestLoadStr;
                procedure TestEvalFile;
                procedure TestEvalStr;
                procedure TestRegisterPackage;
                procedure TestreturnlistPrint;
                procedure TestLoadStr1;
        end;

implementation

procedure TestTLispNode.SetUp;
begin
        //FLispNode := TLispNode.Create;
end;

procedure TestTLispNode.TearDown;
begin
        FLispNode.Free;
        FLispNode := nil;
end;

procedure TestTLispNode.TestiDup;
var
        ReturnValue: TLispNode;
begin
        ReturnValue := FLispNode.iDup;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestregisterToReturnList;
begin
        FLispNode.registerToReturnList;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestiPrint;
var
        ReturnValue: TLispNode;
begin
        ReturnValue := FLispNode.iPrint;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestisNumb;
var
        ReturnValue: Boolean;
begin
        ReturnValue := FLispNode.isNumb;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestisStr;
var
        ReturnValue: Boolean;
begin
        ReturnValue := FLispNode.isStr;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestisInt;
var
        ReturnValue: Boolean;
begin
        ReturnValue := FLispNode.isInt;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestisList;
var
        ReturnValue: Boolean;
begin
        ReturnValue := FLispNode.isList;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckNumb;
begin
        FLispNode.checkNumb;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckToken;
begin
        FLispNode.checkToken;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckStr;
begin
        FLispNode.checkStr;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckInt;
begin
        FLispNode.checkInt;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckList;
begin
        FLispNode.checkList;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestcheckBool;
begin
        FLispNode.checkBool;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestgetList;
var
        ReturnValue: TLispList;
begin
        ReturnValue := FLispNode.getList;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestgetInt;
var
        ReturnValue: Integer;
begin
        ReturnValue := FLispNode.getInt;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestgetNumb;
var
        ReturnValue: Double;
begin
        ReturnValue := FLispNode.getNumb;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestgetStr;
var
        ReturnValue: string;
begin
        ReturnValue := FLispNode.getStr;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestgetBool;
var
        ReturnValue: Boolean;
begin
        ReturnValue := FLispNode.getBool;
        // TODO: Validate method results
end;

procedure TestTLispNode.TestiEvaluate;
var
        ReturnValue: TLispNode;
begin
        ReturnValue := FLispNode.iEvaluate;
        // TODO: Validate method results
end;

procedure TestTLispList.SetUp;
begin
        FLispLang := TLispLang.Create;
        FLispList := TLispList.Create(FLispLang);
end;

procedure TestTLispList.TearDown;
begin
        FLispList.Free;
        FLispList := nil;
end;

procedure TestTLispList.Testsize;
var
        ReturnValue: Integer;
begin
        ReturnValue := FLispList.size;
        // TODO: Validate method results
end;

procedure TestTLispList.Testappend;
var
        ln: TLispNode;
begin
        // TODO: Setup method call parameters
        FLispList.append(ln);
        // TODO: Validate method results
end;

procedure TestTLispList.Testnth;
var
        ReturnValue: TLispNode;
        i: Integer;
begin
        // TODO: Setup method call parameters
        ReturnValue := FLispList.nth(i);
        // TODO: Validate method results
end;

procedure TestTLispList.TestcheckSizeEquals;
var
        A: Integer;
begin
        // TODO: Setup method call parameters
        FLispList.checkSizeEquals(A);
        // TODO: Validate method results
end;

procedure TestTLispList.TestcheckSizeGE;
var
        A: Integer;
begin
        // TODO: Setup method call parameters
        FLispList.checkSizeGE(A);
        // TODO: Validate method results
end;


procedure TestTHashTable.TestsetValue;
var
        obj: TLispNode;
        Index: string;
begin
        // TODO: Setup method call parameters
        FHashTable.setValue(Index, obj);
        // TODO: Validate method results
end;

procedure TestTHashTable.TestgetValue;
var
        ReturnValue: TLispNode;
        Index: string;
begin
        // TODO: Setup method call parameters
        ReturnValue := FHashTable.getValue(Index);
        // TODO: Validate method results
end;

procedure TestILispPackage.SetUp;
begin
        // TODO: Initialize FILispPackage
end;

procedure TestILispPackage.TearDown;
begin
        FILispPackage := nil;
end;

procedure TestILispPackage.TestCallFunction;
var
        ReturnValue: TLispNode;
        list: TLispList;
        fnName: string;
begin
        // TODO: Setup method call parameters
        ReturnValue := FILispPackage.CallFunction(fnName, list);
        // TODO: Validate method results
end;

procedure TestILispPackage.TestSupportFunction;
var
        ReturnValue: Boolean;
        fnName: string;
begin
        // TODO: Setup method call parameters
        ReturnValue := FILispPackage.SupportFunction(fnName);
        // TODO: Validate method results
end;

procedure TestILispPackage.TestGetName;
var
        ReturnValue: string;
begin
        ReturnValue := FILispPackage.GetName;
        // TODO: Validate method results
end;

procedure TestILispPackage.TestGetTestSrc;
var
        ReturnValue: string;
begin
        ReturnValue := FILispPackage.GetTestSrc;
        // TODO: Validate method results
end;


procedure TestTLispPackageBase.TestCallFunction;
var
        ReturnValue: TLispNode;
        list: TLispList;
        fnName: string;
begin
        // TODO: Setup method call parameters
        ReturnValue := FLispPackageBase.CallFunction(fnName, list);
        // TODO: Validate method results
end;

procedure TestTLispPackageBase.TestGetName;
var
        ReturnValue: string;
begin
        ReturnValue := FLispPackageBase.GetName;
        // TODO: Validate method results
end;

procedure TestTLispPackageBase.TestGetTestSrc;
var
        ReturnValue: string;
begin
        ReturnValue := FLispPackageBase.GetTestSrc;
        // TODO: Validate method results
end;

procedure TestTLispPackageBase.TestSupportFunction;
var
        ReturnValue: Boolean;
        fnName: string;
begin
        // TODO: Setup method call parameters
        ReturnValue := FLispPackageBase.SupportFunction(fnName);
        // TODO: Validate method results
end;

procedure TestTLispLang.SetUp;
begin
        FLispLang := TLispLang.Create;
end;

procedure TestTLispLang.TearDown;
begin
        //FLispLang.Free;
        FLispLang := nil;
end;

procedure TestTLispLang.TestEvalFile;
var
        ReturnValue: TLispNode;
        FileName: string;
        Sl : TStringList;
begin
        FileName := 'temp.lsp';
        sl := TStringList.Create ;
        try
          sl.Text := '(print 1)';
          sl.SaveToFile(FileName);
          ReturnValue := FLispLang.EvalFile(FileName);
          Check(ReturnValue.isInt,ReturnValue.getStr);
        finally
         sl.Free;
         DeleteFile(FileName);
        end;

end;

procedure TestTLispLang.TestEvalStr;
var
        ReturnValue: TLispNode;
        ListStr: string;
begin
        ListStr := '(print 1)';
        ReturnValue := FLispLang.EvalStr(ListStr);
        Check(ReturnValue.isInt,ReturnValue.getStr);
end;
procedure TestTLispLang.TestLoadStr;
var
        ReturnValue: TLispList;
        ListStr: string;
begin
        ListStr := '(1 2)';
        ReturnValue := FLispLang.LoadStr(ListStr);
        Check('((1 2))'=ReturnValue.GetStr,
          ReturnValue.GetStr);
end;
procedure TestTLispLang.TestLoadStr1;
var
        ReturnValue: TLispList;
        ListStr: string;
begin
        ListStr := '(1)(2)';
        ReturnValue := FLispLang.LoadStr(ListStr);
        Check('((1)(2))'=ReturnValue.GetStr,
          ReturnValue.GetStr);
end;
procedure TestTLispLang.TestRegisterPackage;
var
        I: ILispPackage;
        str : string;
        ln : TLispNode ;
begin
        // TODO: Setup method call parameters
        I := TLispFile.Create (FLispLang);
        FLispLang.RegisterPackage(I);
        str := '(rfilelist (homedir) "*.pas")';
        ln := FLispLang.EvalStr(str);
        Check(ln.isList,'assert list is failure ');
        Check(false,ln.getStr);
        // TODO: Validate method results
end;

procedure TestTLispLang.TestreturnlistPrint;
begin
        FLispLang.returnlistPrint;
        // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTLispNode.Suite);
  RegisterTest(TestTLispList.Suite);
  RegisterTest(TestTHashTable.Suite);
  RegisterTest(TestILispPackage.Suite);
  RegisterTest(TestTLispPackageBase.Suite);
  RegisterTest(TestTLispLang.Suite);
end.

